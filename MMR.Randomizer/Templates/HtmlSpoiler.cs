// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace MMR.Randomizer.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using MMR.Randomizer.Extensions;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class HtmlSpoiler : HtmlSpoilerBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"<!DOCTYPE html>
<html>
<head>
<style>
    * { box-sizing: border-box; }
    [hidden] { display: none; }
	
    body.dark-mode {
      background-color: #111;
      color: #ccc;
    }
    body.dark-mode a {
      color: #111;
    }
    body.dark-mode button {
      background-color: #ddd;
      color: #111;
    }

    body.light-mode {
      background-color: #eee;
      color: #111;
    }
    body.light-mode a {
      color: #111;
    }
    body.light-mode button {
      background-color: #111;
      color: #ccc;
    }

    th{ text-align:left }
    .region { text-align: center; font-weight: bold; }
    [data-content]:before { content: attr(data-content); }

    .dark-mode .spoiler{ background-color:#ccc }
    .dark-mode .spoiler:active { background-color: #111;  }
    .dark-mode .unavailable .newlocation { background-color: #500705; }
    .dark-mode .acquired .newlocation { background-color: #69591f; }
    .dark-mode .available .newlocation { background-color: #313776; }

    .light-mode .spoiler{ background-color:#111 }
    .light-mode .spoiler:active { background-color: #ccc;  }
    .light-mode .unavailable .newlocation { background-color: #FF9999; }
    .light-mode .acquired .newlocation { background-color: #99FF99; }
    .light-mode .available .newlocation { background-color: #9999FF; }

    
    #spoilerWebService, #spoilerLogState { display: block; width: 100%; }
</style>
<title>Majora's Mask Randomizer Tracker - Seed ");
            this.Write(this.ToStringHelper.ToStringWithCulture(spoiler.Seed));
            this.Write("</title>\r\n</head>\r\n<body class=\"light-mode\">\r\n<details><summary>Randomizer Inform" +
                    "ation</summary>\r\n<p><label><b>Version: </b></label><span>");
            this.Write(this.ToStringHelper.ToStringWithCulture(spoiler.Version));
            this.Write("</span></p>\r\n<p><label><b>Settings: </b></label><code style=\"word-break: break-al" +
                    "l;\">");
            this.Write(this.ToStringHelper.ToStringWithCulture(spoiler.SettingsString));
            this.Write("</code></p>\r\n<p><label><b>Seed: </b></label><span>");
            this.Write(this.ToStringHelper.ToStringWithCulture(spoiler.Seed));
            this.Write(@"</span></p>
<p><label for=""spoilerWebService""><b>Spoiler Web Service: </b></label><input id=""spoilerWebService"" type=""text"" readonly /></p>
<p><label for=""spoilerLogState""><b>Spoiler Log State: </b></label><input id=""spoilerLogState"" type=""text"" /></p>
</details>
<br/>
<button type=""button"" onclick=""toggleDarkLight()"" title=""Toggle dark/light mode"">Toggle Dark Theme</button>
<br/>
");
 if (spoiler.BlitzExtraItems.Any()) { 

            this.Write("<h2>Blitz Starting Items</h2>\r\n");
         foreach (var remains in spoiler.BlitzExtraItems) {

            this.Write("<div>");
            this.Write(this.ToStringHelper.ToStringWithCulture(remains.Name()));
            this.Write("</div>\r\n");
 } 
 } 
 if (spoiler.DungeonEntrances.Any()) { 

            this.Write("<h2>Dungeon Entrance Replacements</h2>\r\n<table border=\"1\" class=\"item-replacement" +
                    "s\">\r\n    <tr>\r\n        <th>Entrance</th>\r\n        <th></th>\r\n        <th>New Des" +
                    "tination</th>\r\n    </tr>\r\n");
         foreach (var kvp in spoiler.DungeonEntrances) {
            var entrance = kvp.Key;
            var destination = kvp.Value;
            this.Write("    <tr data-id=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture((int)destination));
            this.Write("\" data-newlocationid=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture((int)entrance));
            this.Write("\" class=\"unavailable\">\r\n        <td class=\"newlocation\">");
            this.Write(this.ToStringHelper.ToStringWithCulture(entrance.Entrance()));
            this.Write("</td>\r\n        <td><input type=\"checkbox\"/></td>\r\n        <td class=\"spoiler item" +
                    "name\"><span data-content=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(destination.Entrance()));
            this.Write("\"></span></td>\r\n    </tr>\r\n");
 } 
            this.Write("</table>\r\n");
 } 
            this.Write("<h2>Item Replacements</h2>\r\n<table border=\"1\" class=\"item-replacements\">\r\n <tr>\r\n" +
                    "     <th>Location</th>\r\n     <th></th>\r\n     <th></th>\r\n </tr>\r\n");
 foreach (var region in spoiler.ItemList.GroupBy(item => item.Region).OrderBy(g => g.Key)) {

            this.Write(" <tr class=\"region\"><td colspan=\"3\">");
            this.Write(this.ToStringHelper.ToStringWithCulture(region.Key.Name()));
            this.Write("</td></tr>\r\n ");
 foreach (var item in region.OrderBy(item => item.NewLocationName)) { 
            this.Write(" <tr data-id=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Id));
            this.Write("\" data-newlocationid=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.NewLocationId));
            this.Write("\" class=\"unavailable\">\r\n    <td class=\"newlocation\">");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.NewLocationName));
            this.Write("</td>\r\n    <td><input type=\"checkbox\"/></td>\r\n    <td class=\"spoiler itemname\"> <" +
                    "span data-content=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            this.Write("\"></span></td>\r\n </tr>\r\n ");
 } 
 } 
            this.Write("</table>\r\n<h2>Item Locations</h2>\r\n<table border=\"1\" id=\"item-locations\">\r\n <tr>\r" +
                    "\n     <th>Item</th>\r\n     <th></th>\r\n     <th>Region</th>\r\n     <th>Location</th" +
                    ">\r\n </tr>\r\n");
 foreach (var itemCategory in spoiler.ItemList.Where(item => !item.IsJunk).GroupBy(item => item.ItemCategory).OrderBy(g => g.Key)) {

            this.Write(" <tr class=\"region\"><td colspan=\"4\">");
            this.Write(this.ToStringHelper.ToStringWithCulture(itemCategory.Key.ToString()));
            this.Write("</td></tr>\r\n ");
 foreach (var items in itemCategory.GroupBy(item => item.Id).OrderBy(g => g.Key)) { 
            this.Write(" <tr data-id=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(items.Key));
            this.Write("\" data-newlocationid=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(items.First().NewLocationId));
            this.Write("\">\r\n    <td>");
            this.Write(this.ToStringHelper.ToStringWithCulture(items.First().Name));
            this.Write("</td>\r\n    <td><input type=\"checkbox\"/></td>\r\n    <td class=\"spoiler newlocation\"" +
                    "> <span data-content=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(" / ", items.Select(item => item.Region.Name()))));
            this.Write("\"></span></td>\r\n    <td class=\"spoiler newlocation\"> <span data-content=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(items.First().NewLocationName));
            this.Write("\"></span></td>\r\n </tr>\r\n ");
 } 
 } 
            this.Write("</table>\r\n");
 if (spoiler.MessageCosts.Count > 0) { 

            this.Write("<h2>Randomized Prices</h2>\r\n<table border=\"1\">\r\n    <tr>\r\n        <th>Name</th>\r\n" +
                    "        <th>Cost</th>\r\n    </tr>\r\n");
    foreach (var (name, cost) in spoiler.MessageCosts) { 

            this.Write("    <tr>\r\n        <td>");
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            this.Write("</td>\r\n        <td class=\"spoiler\"><span data-content=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(cost));
            this.Write("\"></span></td>\r\n    </tr>\r\n");
 } 
            this.Write("</table>\r\n");
 } 
 if (spoiler.GossipHints != null && spoiler.GossipHints.Any()) { 

            this.Write("<h2>Gossip Stone Hints</h2>\r\n<table border=\"1\">\r\n    <tr>\r\n        <th>Gossip Sto" +
                    "ne</th>\r\n        <th>Message</th>\r\n    </tr>\r\n");
    foreach (var hint in spoiler.GossipHints.OrderBy(h => h.Key.ToString())) { 

            this.Write("    <tr>\r\n        <td>");
            this.Write(this.ToStringHelper.ToStringWithCulture(hint.Key));
            this.Write("</td>\r\n        <td class=\"spoiler\"><span data-content=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(hint.Value));
            this.Write("\"></span></td>\r\n    </tr>\r\n");
 } 
            this.Write("</table>\r\n");
 } 
            this.Write("<script>\r\n    function all(list, predicate) {\r\n        for (var i = 0; i < list.l" +
                    "ength; i++) {\r\n            if (!predicate(list[i])) {\r\n                return fa" +
                    "lse;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function any(" +
                    "list, predicate) {\r\n        for (var i = 0; i < list.length; i++) {\r\n           " +
                    " if (predicate(list[i])) {\r\n                return true;\r\n            }\r\n       " +
                    " }\r\n        return false;\r\n    }\r\n\r\n    function includes(list, item) {\r\n       " +
                    " for (var i = 0; i < list.length; i++) {\r\n            if (list[i] === item) {\r\n " +
                    "               return true;\r\n            }\r\n        }\r\n        return false;\r\n  " +
                    "  }\r\n\r\n    function find(list, predicate) {\r\n        for (var i = 0; i < list.le" +
                    "ngth; i++) {\r\n            if (predicate(list[i])) {\r\n                return list" +
                    "[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    var segme" +
                    "ntSize = 16;\r\n    function getItemList() {\r\n        var segments = [];\r\n        " +
                    "for (var i = 0; i < logic.length; i++) {\r\n            var segmentIndex = parseIn" +
                    "t(i / segmentSize);\r\n            segments[segmentIndex] = segments[segmentIndex]" +
                    " || 0;\r\n            if (logic[i].Checked) { segments[parseInt(i / segmentSize)] " +
                    "+= (1 << (i%segmentSize)); }\r\n        }\r\n        return segments.map(function(s)" +
                    " { return s.toString(16); }).join(\"-\");\r\n\t}\r\n    function saveItems() {\r\n       " +
                    " var saveInput = document.querySelector(\"#spoilerLogState\");\r\n        var oldVal" +
                    "ue = saveInput.value;\r\n\t\tsaveInput.value = getItemList();\r\n        if (isRemote(" +
                    ")) {\r\n            return ajax(\'POST\', {trackercode: oldValue, newtrackercode: sa" +
                    "veInput.value});\r\n        } else {\r\n            return new Promise((rs, rj) => {" +
                    " rs({ StatusCode: 1, NewTrackerCode: saveInput.value }); });\r\n        }\r\n    }\r\n" +
                    "\r\n    function loadItems() {\r\n        var saveInput = document.querySelector(\"#s" +
                    "poilerLogState\");\r\n        var segments = saveInput.value.split(\"-\");\r\n        i" +
                    "f (Math.ceil(logic.length / segmentSize) !== segments.length) {\r\n            ale" +
                    "rt(\"Invalid Spoiler Log state\");\r\n            return;\r\n        }        \r\n      " +
                    "  segments = segments.map(function(segment) { return parseInt(segment, 16); });\r" +
                    "\n        var locationsToCheck = [];\r\n        for (var i = 0; i < segments.length" +
                    "; i++) {\r\n            var segment = segments[i];\r\n            for (var j = 0; j " +
                    "< segmentSize; j++) {\r\n                var itemIndex = segmentSize * i + j;\r\n   " +
                    "             if (itemIndex < logic.length) {\r\n                    var mark = ((s" +
                    "egment >> j) % 2 == 1);\r\n                    logic[itemIndex].Checked = mark;\r\n " +
                    "                   var itemRow = document.querySelector(\"tr[data-newlocationid=\'" +
                    "\" + itemIndex + \"\']\");\r\n                    if (itemRow) {\r\n                    " +
                    "    logic[itemRow.dataset.id].Acquired = mark;\r\n                    } else {\r\n  " +
                    "                      logic[itemIndex].Acquired = mark;\r\n                    }\r\n" +
                    "                    if (!includes(locationsToCheck, itemIndex)) { locationsToChe" +
                    "ck.push(itemIndex); }\r\n                }\r\n            }\r\n        }\r\n        chec" +
                    "kLocations(locationsToCheck);\r\n    }\r\n\r\n    function checkLocations(locations) {" +
                    "\r\n        var itemsToCheck = [];\r\n        for (var i = 0; i < locations.length; " +
                    "i++) {\r\n            var location = logic[locations[i]];\r\n            location.Is" +
                    "Available = \r\n                (location.RequiredItemIds === null || location.Req" +
                    "uiredItemIds.length === 0 || all(location.RequiredItemIds, function(id) { return" +
                    " logic[id].Acquired || logic[id].IsItemRemoved; }))\r\n                && \r\n      " +
                    "          (location.ConditionalItemIds === null || location.ConditionalItemIds.l" +
                    "ength === 0 || any(location.ConditionalItemIds, function(conditionals) { return " +
                    "all(conditionals, function(id) { return logic[id].Acquired || logic[id].IsItemRe" +
                    "moved; }); }));\r\n            \r\n            var newLocation = find(logic, functio" +
                    "n(io) { return io.NewLocationId === locations[i]; });\r\n            if (!newLocat" +
                    "ion) {\r\n                newLocation = location;\r\n            }\r\n            if (" +
                    "!newLocation.Acquired && location.ShouldAutoAcquire && location.IsAvailable) {\r\n" +
                    "                newLocation.Acquired = true;\r\n                itemsToCheck.push(" +
                    "newLocation.ItemId);\r\n            }\r\n            if (newLocation.Acquired && loc" +
                    "ation.ShouldAutoAcquire && !location.IsAvailable) {\r\n                newLocation" +
                    ".Acquired = false;\r\n                itemsToCheck.push(newLocation.ItemId);\r\n    " +
                    "        }\r\n        \r\n            var locationRows = document.querySelectorAll(\"." +
                    "item-replacements tr[data-newlocationid=\'\" + locations[i] + \"\']\");\r\n            " +
                    "for (const locationRow of locationRows) {\r\n                locationRow.className" +
                    " = \"\";\r\n                locationRow.classList.add(location.IsAvailable ? \"availa" +
                    "ble\" : \"unavailable\");\r\n                var itemName = locationRow.querySelector" +
                    "(\".itemname\");\r\n                var checkbox = locationRow.querySelector(\"input\"" +
                    ");\r\n                checkbox.checked = location.Checked;\r\n                if (lo" +
                    "cation.Checked) {\r\n                    itemName.classList.remove(\"spoiler\");\r\n  " +
                    "              } else {\r\n                    itemName.classList.add(\"spoiler\");\r\n" +
                    "                }\r\n            }\r\n        \r\n            var itemRows = document." +
                    "querySelectorAll(\"#item-locations tr[data-newlocationid=\'\" + locations[i] + \"\']\"" +
                    ");\r\n            for (const itemRow of itemRows) {\r\n                var itemNames" +
                    " = itemRow.querySelectorAll(\".newlocation\");\r\n                var checkbox = ite" +
                    "mRow.querySelector(\"input\");\r\n                var item = logic[itemRow.dataset.i" +
                    "d];\r\n                checkbox.checked = item.Acquired;\r\n                for (con" +
                    "st itemName of itemNames) {\r\n                    if (item.Acquired) {\r\n         " +
                    "               itemName.classList.remove(\"spoiler\");\r\n                    } else" +
                    " {\r\n                        itemName.classList.add(\"spoiler\");\r\n                " +
                    "    }\r\n                }\r\n            }\r\n        }\r\n        if (itemsToCheck.len" +
                    "gth > 0) { checkItems(itemsToCheck); }\r\n    }\r\n\r\n    var logic = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(spoiler.LogicJson));
            this.Write(";\r\n\r\n    for (var i = 0; i < logic.length; i++) {\r\n        var item = logic[i];\r\n" +
                    "        if (item.Acquired) {\r\n            item.Checked = true;\r\n            var " +
                    "inputs = document.querySelectorAll(\"tr[data-newlocationid=\'\" + i + \"\'] input\");\r" +
                    "\n            for (const input of inputs) {\r\n                input.checked = true" +
                    ";\r\n            }\r\n        }\r\n        if (item.RequiredItemIds !== null) {\r\n     " +
                    "       for (var j = 0; j < item.RequiredItemIds.length; j++) {\r\n                " +
                    "var id = item.RequiredItemIds[j];\r\n                if (!logic[id].LocksLocations" +
                    ") {\r\n                    logic[id].LocksLocations = [];\r\n                }\r\n    " +
                    "            if (!includes(logic[id].LocksLocations, i)) {\r\n                    l" +
                    "ogic[id].LocksLocations.push(i);\r\n                }\r\n            }\r\n        }\r\n " +
                    "       if (item.ConditionalItemIds !== null) {\r\n            for (var k = 0; k < " +
                    "item.ConditionalItemIds.length; k++) {\r\n                for (var j = 0; j < item" +
                    ".ConditionalItemIds[k].length; j++) {\r\n                    var id = item.Conditi" +
                    "onalItemIds[k][j];\r\n                    if (!logic[id].LocksLocations) {\r\n      " +
                    "                  logic[id].LocksLocations = [];\r\n                    }\r\n       " +
                    "             if (!includes(logic[id].LocksLocations, i)) {\r\n                    " +
                    "    logic[id].LocksLocations.push(i);\r\n                    }\r\n                }\r" +
                    "\n            }\r\n        }\r\n    }\r\n\r\n    function checkItems(itemIds) {\r\n        " +
                    "var locationsToCheck = [];\r\n        for (var i = 0; i < itemIds.length; i++) {\r\n" +
                    "            var itemId = itemIds[i];\r\n            if (logic[itemId].LocksLocatio" +
                    "ns) {\r\n                for (var j = 0; j < logic[itemId].LocksLocations.length; " +
                    "j++) {\r\n                    var locationId = logic[itemId].LocksLocations[j];\r\n " +
                    "                   if (!includes(locationsToCheck, locationId)) {\r\n             " +
                    "           locationsToCheck.push(locationId);\r\n                    }\r\n          " +
                    "      }\r\n            }\r\n        }\r\n        checkLocations(locationsToCheck);\r\n  " +
                    "  }\r\n\r\n    var startingLocations = [\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture((int)MMR.Randomizer.GameObjects.Item.MaskDeku));
            this.Write(",\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture((int)MMR.Randomizer.GameObjects.Item.SongHealing));
            this.Write(",\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture((int)MMR.Randomizer.GameObjects.Item.StartingSword));
            this.Write(",\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture((int)MMR.Randomizer.GameObjects.Item.StartingShield));
            this.Write(",\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture((int)MMR.Randomizer.GameObjects.Item.StartingHeartContainer1));
            this.Write(",\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture((int)MMR.Randomizer.GameObjects.Item.StartingHeartContainer2));
            this.Write("\r\n    ];\r\n    for (var id of startingLocations) {\r\n        logic[id].Checked = tr" +
                    "ue;\r\n        var row = document.querySelector(\"tr[data-newlocationid=\'\" + id + \"" +
                    "\']\");\r\n        var itemId = id;\r\n        if (row) {\r\n            itemId = row.da" +
                    "taset.id;\r\n            document.querySelector(\"tr[data-newlocationid=\'\" + id + \"" +
                    "\'] input\").checked = true;\r\n        }\r\n        logic[itemId].Acquired = true;\r\n " +
                    "   }\r\n\r\n    var allLocationIds = [];\r\n    for (var i = 0; i < logic.length; i++)" +
                    " {\r\n        allLocationIds.push(i);\r\n    }\r\n    checkLocations(allLocationIds);\r" +
                    "\n\r\n    var rows = document.querySelectorAll(\"tr\");\r\n    for (var i = 1; i < rows" +
                    ".length; i++) {\r\n        var row = rows[i];\r\n        var checkbox = row.querySel" +
                    "ector(\"input\");\r\n        if (checkbox) {\r\n            checkbox.addEventListener(" +
                    "\"click\", function(e) {\r\n                var row = e.target.closest(\"tr\");\r\n     " +
                    "           var rowId = parseInt(row.dataset.id);\r\n                var newLocatio" +
                    "nId = parseInt(row.dataset.newlocationid);\r\n                logic[newLocationId]" +
                    ".Checked = e.target.checked;\r\n                logic[rowId].Acquired = e.target.c" +
                    "hecked;\r\n                checkLocations([newLocationId]);\r\n                check" +
                    "Items([rowId]);\r\n\t\t\t\tsaveItems().then((resp) => {\r\n\t\t\t\t\tswitch (resp.StatusCode)" +
                    " {\r\n\t\t\t\t\t\tcase 1: break;\r\n\t\t\t\t\t\tcase 2: \r\n\t\t\t\t\t\t\tvar newState = e.target.checked" +
                    ";\r\n\t\t\t\t\t\t\tdocument.querySelector(\'#spoilerLogState\').value = resp.NewTrackerCode" +
                    "; loadItems();\r\n\t\t\t\t\t\t\te.target.checked = newState;\r\n\t\t\t\t\t\t\te.target.dispatchEve" +
                    "nt(new Event(\'click\'));\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\tsetupFailure(resp" +
                    ".StatusMessage);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}).catch(setupFailure);\r\n          " +
                    "  });\r\n        }\r\n    }\r\n\r\n    function toggleDarkLight() {\r\n        var body = " +
                    "document.querySelector(\'body\');\r\n        var currentClassBody = body.className;\r" +
                    "\n        body.className = currentClassBody === \"dark-mode\" ? \"light-mode\" : \"dar" +
                    "k-mode\";\r\n\t\tif (!!localStorage) { localStorage.setItem(\'mode\', body.className); " +
                    "}\r\n    }\r\n\tif (!!localStorage) { \r\n\t\tdocument.querySelector(\'body\').className = " +
                    "localStorage.getItem(\'mode\') || \'light-mode\'; \r\n\t\tdocument.querySelector(\'#spoil" +
                    "erWebService\').value = localStorage.getItem(\'svcUrl\') || \'");
            this.Write(this.ToStringHelper.ToStringWithCulture(spoiler.WebService));
            this.Write("\';\r\n\t}\r\n\t\r\n\tvar intervalId;\r\n\tfunction initialSetup() {\r\n\t\tdocument.querySelector" +
                    "(\'details\').open = false;\r\n\t\tvar input = document.getElementById(\"spoilerWebServ" +
                    "ice\");\r\n\t\tinput.readOnly = true;\r\n\t\tajax(\'GET\').then((resp) => {\r\n\t\t\tswitch (res" +
                    "p.StatusCode) {\r\n\t\t\t\tcase 1: \r\n\t\t\t\t\tlocalStorage.setItem(\'svcUrl\', document.getE" +
                    "lementById(\"spoilerWebService\").value);\r\n\t\t\t\t\tdocument.querySelector(\'#spoilerLo" +
                    "gState\').value = resp.NewTrackerCode; loadItems();\r\n\t\t\t\t\tintervalId = setInterva" +
                    "l(periodicCheck, 10000);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 11: \r\n\t\t\t\t\tlocalStorage.setItem(" +
                    "\'svcUrl\', document.getElementById(\"spoilerWebService\").value);\r\n\t\t\t\t\tajax(\'POST\'" +
                    ", {trackercode: \'\', newtrackercode: document.querySelector(\'#spoilerLogState\').v" +
                    "alue}).then((resp) => {\r\n\t\t\t\t\t\tif (resp.StatusCode != 1) { setupFailure(resp.Sta" +
                    "tusMessage); }\r\n\t\t\t\t\t}).catch(setupFailure);\r\n\t\t\t\t\tintervalId = setInterval(peri" +
                    "odicCheck, 10000);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tsetupFailure(resp.StatusMess" +
                    "age);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}).catch(setupFailure);\r\n\t}\r\n\tfunction periodicCheck" +
                    "() {\r\n\t\tajax(\'GET\').then((resp) => {\r\n\t\t\tdocument.querySelector(\'#spoilerLogStat" +
                    "e\').value = resp.NewTrackerCode; loadItems();\r\n\t\t}).catch(setupFailure);\r\n\t}\r\n\tf" +
                    "unction setupFailure(errMsg) {\r\n\t\tif (!!errMsg || typeof errMsg !== \'string\') { " +
                    "errMsg = \'\'; }\r\n\t\tclearInterval(intervalId);\r\n\t\tvar input = document.getElementB" +
                    "yId(\"spoilerWebService\");\r\n\t\tdocument.querySelector(\'details\').open = true;\r\n\t\tw" +
                    "indow.scrollTo(0, 0);\r\n\t\tinput.readOnly = false; input.focus();\r\n\t\talert(\'The Sp" +
                    "oiler Web Service did not respond. \' + errMsg + \' Please specify the correct URL" +
                    " to use.\');\r\n\t}\r\n\t\r\n\tfunction ajax(method, data) {\r\n\t\treturn fetch(getEndpoint()" +
                    ", {\r\n\t\t\tmethod: method,\r\n\t\t\theaders: {\r\n\t\t\t\t\'Accept\': \'application/json\',\r\n\t\t\t\t\'" +
                    "ngrok-skip-browser-warning\': \'1\'\r\n\t\t\t},\r\n            body: JSON.stringify(data)\r" +
                    "\n\t\t}).then((resp) => resp.json());\r\n\t}\r\n\tfunction getEndpoint() { return documen" +
                    "t.getElementById(\"spoilerWebService\").value + \'?auth=");
            this.Write(this.ToStringHelper.ToStringWithCulture(spoiler.WebAuthKey));
            this.Write(@"&editor=***EDITORID***'; }
	function qs(data) { 
		if (!data) return '';
		var returnVal = '';
		for (let key in data) { returnVal += '&' + key + '=' + encodeURIComponent(data[key]); }
		return returnVal; 
	}
    function isRemote() { return window.location.protocol != 'file:'; }
    if (isRemote()) {
	    document.querySelector('#spoilerWebService').addEventListener(""keypress"", function(event) { if (!document.getElementById(""spoilerWebService"").readOnly && event.keyCode === 13) { initialSetup(); } });
	    document.querySelector('#spoilerLogState').value = getItemList();
	    initialSetup();
    } else {
        document.querySelector('#spoilerWebService').parentElement.setAttribute('hidden', '');
        document.querySelector('#spoilerLogState').addEventListener(""keypress"", function(event) {
            if (event.keyCode === 13) {
                loadItems();
            }
        });
    }
</script>
</body>
</html>
");
            return this.GenerationEnvironment.ToString();
        }
    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class HtmlSpoilerBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
